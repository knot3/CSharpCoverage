#!/usr/bin/perl

use strict;
use warnings;

use MIME::Base64;
use Digest::MD5 qw(md5 md5_hex md5_base64);

sub percent {
	my ($num) = @_;
	my $str = sprintf '%.f%%', 100 * $num;
	$str = "&nbsp;&nbsp;".$str if $num < 0.1;
	return $str;
}

my %file_cache = ();

sub find_line {
	my ($file, $line, $file_cache_ref) = @_;
	my $lines = [];
	if ($file_cache_ref->{$file}) {
		$lines = $file_cache{$file};
	}
	else {
		open my $f, "<", $file;
		$lines = $file_cache_ref->{$file} = [ <$f> ];
		close $f;
	}
	return $lines->[$line - 1];
}

sub codeformat {
	my ($code) = @_;
	$code =~ s/\t/    /gm;
	$code =~ s/[ ]/&nbsp;/gm;
	return $code;
}

sub without_packages {
	return map {
		s/Knot3\.[A-Za-z]+\.([A-Za-z]+[^a-zA-Z])/$1/gm;
		$_
	} @_;
}

sub reformat {
	return map {
		s/System\.Void//gm;
		s/System\.Collections.Generic.//gm;
		s/System\.Collections.//gm;
		s/System\.//gm;
		s/Microsoft.Xna.Framework.//gm;
		s/\s*[,]\s*/, /gm;
		s/\.ctor/Constructor/gm;
		s/Int32/int/gm;
		s/Single/float/gm;
		s/Boolean([^A-Za-z0-9])/bool$1/gm;
		s/String/string/gm;
		s/VConstructor2/Vector2/gm;
		s/VConstructor3/Vector3/gm;
		s/[`]1/&lt;T&gt;/gm;
		s/[`]2/&lt;T,U&gt;/gm;
		$_
	} @_;
}

sub _hash {
	my $h = md5_hex(encode_base64($_[0]));
	$h =~ s/[^a-zA-Z0-9]//gm;
	$h =~ s/^(.{10}).*/$1/gm;
	return $h;
}

sub decode_extra {
	my ($extra) = @_;
	my %decoded_extra =
		map {
			my @pair = split(/[:]\s*/, $_);
			my $key = lc shift @pair;
			($key, join(":", @pair))
		} split(/[,]\s+/, $extra);
	$decoded_extra{code} = find_line($decoded_extra{file}, $decoded_extra{line}, \%file_cache);
	$decoded_extra{file} =~ s/^.*\/([^\/]+)$/$1/gm;
	$decoded_extra{instruction} =~ s/IL[^:]+[:]//gm;
	return %decoded_extra;
}

open my $f, "<", "coverageResults.txt";
my @lines = <$f>;
close $f;

open $f, "<", "template/head.php";
my @head = <$f>;
close $f;
open $f, "<", "template/tail.php";
my @tail = <$f>;
close $f;

my %types = ();

foreach my $line (@lines) {
	if ($line =~ /^(MISS|HIT)\s.*?Method: (.*)/) {
		my ($hit, $str) = ($1, $2);
		$hit = $hit eq "HIT" ? 1 : 0;

		if ($str =~ /^([^\s]+)\s([^:]+)::([^(]+)\(([^)]*)\), (.*)/) {
			my ($return, $type, $method, $params, $extra) = ($1,$2,$3,$4,$5);

			$types{$type} ||= [];
			push @{$types{$type}}, [ $hit, $return, $method, $params, {decode_extra($extra)} ];
		}
	}
}

foreach my $type (keys %types) {
	my %entries_by_lines = ();
	foreach my $entry (@{$types{$type}}) {
		my ($ishit, $return, $method, $params, $extra) = @$entry;
		next if $extra->{line} eq "-1";
		my $line = $extra->{line};
		$entries_by_lines{$line} ||= [];
		push @{$entries_by_lines{$line}}, $entry;
	}
	my @entries = ();
	foreach my $line (sort keys %entries_by_lines) {
		my @line_entries = @{$entries_by_lines{$line}};
		my $coverage = 0;
		foreach my $entry (@line_entries) {
			my ($ishit, $return, $method, $params, $extra) = @$entry;
			$coverage += $ishit ? 1 : 0;
		}
		my $is_covered = $coverage > 0 ? 1 : 0;
		my $main_entry = $line_entries[0];
		$main_entry->[0] = $is_covered;
		$main_entry->[4]->{instruction} = join(', ', map {'['.$_.']'} grep {!/(nop)|(ret)|(ldloc V_)/i} map {$_->[4]->{instruction}} @line_entries);
		push @entries, $main_entry;
	}
	@{$types{$type}} = @entries;
}

my @html_overview = ();
my @html_classes = ();
my %html_bytecode = ();
my $overall_hits = 0;
my $overall_misses = 0;

foreach my $type (sort reformat keys %types) {

	my %hit_lines = ();
	my %missed_lines = ();
	my %methods = ();
	foreach my $entry (@{$types{$type}}) {
		my ($ishit, $return, $method, $params, $extra) = @$entry;

		$ishit = -1 if $extra->{instruction} =~ /^\s*?$/i;

		if ($ishit == 1) { $hit_lines{$extra->{line}}++; }
                elsif ($ishit == 0) { $missed_lines{$extra->{line}}++; }

		my $signature = $return . ' ' . $method . '(' . $params . ')';
		$methods{$signature} ||= [];
		push @{$methods{$signature}}, [ $ishit, $return, $method, $params, $extra ];
	}
	my $hits = scalar keys %hit_lines;
	my $misses = scalar keys %missed_lines;
	$overall_hits += $hits;
	$overall_misses += $misses;

	my $coverage = $hits+$misses > 0 ? $hits/($hits+$misses) : 1;

	$html_bytecode{$type} ||= [];
	push @{$html_bytecode{$type}}, q[
		<h3>] . $type . q[</h3>
	];

	my @html_methods = ();
	foreach my $methodkey (sort keys %methods) {

		my @html_method_code = ();

		my %hit_lines = ();
		my %missed_lines = ();
		my ($return, $method, $params) = ('','','');
		foreach my $methodentry (@{$methods{$methodkey}}) {
			my ($ishit, $_return, $_method, $_params, $extra) = @$methodentry;

			my %decoded_extra = %$extra;
			next if $decoded_extra{line} eq "-1";

			if ($ishit == 1) { $hit_lines{$decoded_extra{line}}++; }
	                elsif ($ishit == 0) { $missed_lines{$decoded_extra{line}}++; }
			($return, $method, $params) = ($_return, $_method, $_params);

			my $class = $ishit > 0 ? 'hit' : $ishit == 0 ? 'miss' : 'invalid';
			push @html_method_code, without_packages q[
	                        <tr class='cov-].$class.q['>
	                        <td class="small">].$decoded_extra{file}.q[</td>
	                        <td class="number small">].$decoded_extra{line}.q[</td>
	                        <td class="number small">].$decoded_extra{offset}.q[</td>
	                        <td style="min-width: 400px;"><code>] . codeformat($decoded_extra{code}) . q[</code></td>
	                        <td>].$decoded_extra{instruction}.q[</td>
	                        </tr>
	                ];
#	                        <!-- <td>].$decoded_extra{instruction}.q[</td> -->
		}

		my $hits = scalar keys %hit_lines;
		my $misses = scalar keys %missed_lines;
		my $coverage = $hits+$misses > 0 ? $hits/($hits+$misses) : 1;

		next if $hits+$misses == 0;

		my $class = $coverage > 0.8 ? 'hit' : $coverage < 0.2 ? 'miss' : 'half';

		push @html_methods, without_packages q[
			<tr>
			<td>].$return.q[</td>
			<td>].$method.q[</td>
			<td>].$params  .q[<!--h=].$hits.q[,m=].$misses.q[-->]  .q[</td>
			<td class='medium number cov-].$class.q['><a href='coverage/] . _hash($type) . q[.php#] . _hash($methodkey) . q['>]. percent($coverage) .q[</a></td>
			</tr>
		];

		push @{$html_bytecode{$type}}, q[
                        <div class='part' id='] . _hash($methodkey) . q['>
                        <h4>] . $methodkey . q[ (] . percent($coverage) . q[)</h4>
                        <table class='flat-table cov'>
                        <tr>
				<th>File</th>
				<th>Line</th>
				<th>Offset</th>
				<th>Code</th>
				<th>Instruction</th>
			</tr>
                ];
		push @{$html_bytecode{$type}}, @html_method_code;
		push @{$html_bytecode{$type}}, q[
                        </table>
                        </div>
                ];

	}

	if (scalar(keys %methods) > 0 && @{$methods{(keys %methods)[0]}}) {
		push @html_classes, q[
			<div class='part' id='] . _hash($type) . q['>
			<h4>] . $type . q[ (] . percent($coverage) . q[)</h4>
			<table class='flat-table cov'>
			<tr><th>Return Value</th><th>Method</th><th>Parameters</th><th>Coverage</th></tr>
		];

		push @html_classes, @html_methods;

		push @html_classes, q[
			</table>
			</div>
		];

		my $class = $coverage > 0.8 ? 'hit' : $coverage < 0.2 ? 'miss' : 'half';

		push @html_overview, q[ <!-- ] . $type . q[ -->
			<tr>
			<td>].$type.q[</td>
			<td class='medium number cov-].$class.q['><a href='#] . _hash($type) . q['>]. percent($coverage) .q[</a></td>
			</tr>
		];
	}
}

my $overall_coverage = $overall_hits+$overall_misses > 0 ? $overall_hits/($overall_hits+$overall_misses) : 1;

@html_overview = (
	q[
		<div class='part'>
		<h4>Overall Coverage: ] . (percent($overall_coverage*1000)/1000) . q[%</h4>
		<table class='flat-table cov'>
		<tr><th>Type</th><th>Coverage</th></tr>
	],
	sort({ lc($a) cmp lc($b) } reformat(@html_overview)),
	q[
		</table>
		</div>
	],
);

my @html = (@html_overview, @html_classes);

@html = reformat(@html);

open my $f, ">", 'out/coverage.php';
print $f join("\n", @head, @html, @tail);
close $f;

foreach my $type (sort keys %html_bytecode) {
	my @html = reformat(@{$html_bytecode{$type}});
	open my $f, ">", 'out/coverage/' . _hash($type) . '.php';
	print $f join("\n", @head, @html, @tail);
	close $f;
}
